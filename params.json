{
  "name": "Rauth",
  "tagline": "RAuth token based authentication system using Java and Redis",
  "body": "# RAuth - Reliable Robust Radix Authentication\r\n> RAuth token based authentication system build on top of Java and Redis.\r\n\r\n![Alt text](http://i.imgur.com/2O7q6sq.png \"RAuth Hardik\")\r\n\r\nThe general concept behind a RAuth token-based authentication system is simple. Allow users to enter their username and password in order to obtain a token which allows them to fetch a specific resource - without using their username and password. Once their token has been obtained, the user can offer the token - which offers access to a specific resource for a time period - to the remote site.\r\n\r\nRAuth is a java library which provides token-based authentication system for all type of java projects or can run independently to support your existing system.\r\n\r\n## Prerequisite\r\n* RAuth requires a separate directory containing `app.properties` file. For linux and unix operating systems it should be `/opt/rauth/` and for windows it should be `C:\\rauth`. Download property file from here: [app.properties](https://github.com/thakerhardiks/RAuth/blob/master/rauth.properties). I will write detail explaination of it soon.\r\n* Sample SQL : [rauth.db.sql](https://github.com/thakerhardiks/RAuth/blob/master/rauth.db.sql)\r\n\r\n## Generating Authentication Tokens\r\n\r\n* Add RAuth jar into your project.\r\n* RAuth provides a facility to create independent database connection pools as well. If you want to use your connection pooling mechanism you need to pass it to DataHelper class.\r\n* To authenticate a user simply call static method, `RAuth.authUser(\"USERNAME\", \"PASSWORD\");`. This method will return `User` object. Payload is a JWT term represents content/information you want to put inside your token. Read more about [JWT](http://jwt.io) here.\r\n```\r\nUser u = RAuth.authUser(\"username\", \"password\");\r\nif(u.getUserStatus().equals(UserStatus.ACTIVATE)) {\t\t\t\t\t\t\t\r\n\t/* \r\n\t * Add Your ACL Code Here ! RAuth future release will have it.\r\n\t */\r\n\tString rtoken = RAuth.issueJwt(Audience, Payload);\t\t\t\r\n}\r\n```\r\n* Store this token in your client and send it with your request to the server.\r\n\r\n## Authenticating Tokens\r\n* The method `RAuth.authJwt(Audience, jwt)` returns payload from the token. Extract and verify token from its payload.\r\nThat's it. Isn't it really simple?\r\n\r\n## What's Next?\r\n* Good set of examples explaining single sign on feature, Cross devices authentication.\r\n* Implementing ORM to make it database independent\r\n* Detailed guide of system with [Redis LRU Cache](http://redis.io/topics/lru-cache) example.\r\n* LDAP Integration.\r\n\r\nLet's make a scalable authentication system together!\r\n\r\n- Hardik Thaker.\r\n\r\n\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}